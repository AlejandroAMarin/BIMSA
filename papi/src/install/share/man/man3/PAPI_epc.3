.TH "PAPI_epc" 3 "Thu Dec 14 2023" "Version 7.1.0.0" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_epc \- Simplified call to get arbitrary events per cycle, real and processor time\&.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 

.PP
\fBC Interface: \fP
.RS 4
#include <\fBpapi\&.h\fP> 
.br
int \fBPAPI_epc( int event, float *rtime, float *ptime, long long *ref, long long *core, long long *evt, float *epc )\fP;
.RE
.PP
\fBParameters\fP
.RS 4
\fIevent\fP event code to be measured (0 defaults to PAPI_TOT_INS) 
.br
\fI*rtime\fP realtime since the latest call 
.br
\fI*ptime\fP process time since the latest call 
.br
\fI*ref\fP incremental reference clock cycles since the latest call 
.br
\fI*core\fP incremental core clock cycles since the latest call 
.br
\fI*evt\fP events since the latest call 
.br
\fI*epc\fP incremental events per cycle since the latest call
.RE
.PP
\fBReturn values\fP
.RS 4
\fIPAPI_EINVAL\fP The counters were already started by something other than \fBPAPI_epc()\fP\&. 
.br
\fIPAPI_ENOEVNT\fP One of the requested events does not exist\&. 
.br
\fIPAPI_ENOMEM\fP Insufficient memory to complete the operation\&.
.RE
.PP
The first call to \fBPAPI_epc()\fP will initialize the PAPI interface, set up the counters to monitor the user specified event, PAPI_TOT_CYC, and PAPI_REF_CYC (if it exists) and start the counters\&.
.PP
Subsequent calls will read the counters and return real time, process time, event counts, the core and reference cycle count and EPC rate since the latest call to \fBPAPI_epc()\fP\&.
.PP
\fBPAPI_epc()\fP can provide a more detailed look at algorithm efficiency in light of clock variability in modern cpus\&. MFLOPS is no longer an adequate description of peak performance if clock rates can arbitrarily speed up or slow down\&. By allowing a user specified event and reporting reference cycles, core cycles and real time, \fBPAPI_epc\fP provides the information to compute an accurate effective clock rate, and an accurate measure of computational throughput\&. Note that \fBPAPI_epc()\fP is thread-safe and can therefore be called by multiple threads\&.
.PP
\fBSee also\fP
.RS 4
\fBPAPI_flips_rate()\fP 
.PP
\fBPAPI_flops_rate()\fP 
.PP
\fBPAPI_ipc()\fP 
.PP
\fBPAPI_rate_stop()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code\&.
